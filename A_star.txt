def aStarAlgo(start_node, stop_node):
         
        open_set = set(start_node) 
        closed_set = set()
        g = {}
        parents = {}
 
        g[start_node] = 0
        parents[start_node] = start_node
         
         
        while len(open_set) > 0:
            n = None
 
            for v in open_set:
                if n == None or g[v] + heuristic(v) < g[n] + heuristic(n):
                    n = v
             
                     
            if n == stop_node or Graph_nodes[n] == None:
                pass
            else:
                for (m, weight) in get_neighbors(n):
                    if m not in open_set and m not in closed_set:
                        open_set.add(m)
                        parents[m] = n
                        g[m] = g[n] + weight
                         
     
                    else:
                        if g[m] > g[n] + weight:
                            #update g(m)
                            g[m] = g[n] + weight
                            #change parent of m to n
                            parents[m] = n
                             
                            if m in closed_set:
                                closed_set.remove(m)
                                open_set.add(m)
 
            if n == None:
                print('Path does not exist!')
                return None
 
            if n == stop_node:
                path = []
 
                while parents[n] != n:
                    path.append(n)
                    n = parents[n]
 
                path.append(start_node)
 
                path.reverse()
 
                print('Path found: {}'.format(path))
                return path
 
 
            open_set.remove(n)
            closed_set.add(n)
 
        print('Path does not exist!')
        return None
     
                        
                        
                        
                        
def get_neighbors(v):
    if v in graph_nodes:
        return graph_nodes[v]
    else:
        return None
def heuristic(n):
    h_dist = {
        'A': 11,
        'B':8,
        'C':5,
        'D':7,
        'E':3,
        'F':6,
        'G':5,
        'H':3,
        'I':1,
        'J':0
    }
    
    return h_dist[n]
Graph_nodes = {
    'A' : [('B',6),('F',3)],
    'B' : [('C',3),('D',2)],
    'C' : [('D',1),('E',5)],
    'D' : [('E',8)],
    'E' : None,
    'F' : None,
#     'G' : [('I',3)],
#     'H' : [('I',2)],
#     'I' : [('E',5),('J',3)]
}

aStarAlgo('E','A')